class <emptyTree><<C <root>>> < (::<todo sym>)
  def testit<<C <todo sym>>>(&<blk>)
    begin
      s = <emptyTree>::<C SomeClass>.new()
      wrap = ::T.let(s, <emptyTree>::<C Interface>)
      <emptyTree>::<C T>.assert_type!(wrap, <emptyTree>::<C Interface>)
      wrap.other_method()
      wrap.some_method()
      <emptyTree>::<C Other>.wrap_instance("hi", "there")
      o = <emptyTree>::<C Other>
      o.wrap_instance("hi")
    end
  end

  module <emptyTree>::<C Interface><<C <todo sym>>> < ()
    def some_method<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    :"some_method"
  end

  class <emptyTree>::<C SomeClass><<C <todo sym>>> < (::<todo sym>)
    def other_method<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    <self>.include(<emptyTree>::<C Interface>)

    :"other_method"
  end

  class <emptyTree>::<C Other><<C <todo sym>>> < (::<todo sym>)
    def self.wrap_instance<<C <todo sym>>>(x, y = <emptyTree>, &<blk>)
      <emptyTree>
    end

    def self.wrap_instance<defaultArg>1<<C <todo sym>>>(x, y = <emptyTree>, &<blk>)
      nil
    end

    :"wrap_instance"

    :"wrap_instance<defaultArg>1"
  end

  :"testit"
end
